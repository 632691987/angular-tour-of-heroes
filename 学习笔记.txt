1, 建立新的项目
ng new angular-tour-of-heroes

2, 启动项目
cd angular-tour-of-heroes
ng serve --open

3, 绑定值
在 ts 的属性里面，加上

export class AppComponent {
  title = 'Tour of Heroes';// 加在这里
}

于是在 HTML 上面就可以
{{title}}

4, 添加一个组件
ng generate component heroes

于是，CLI 创建了一个新的文件夹 src/app/heroes/，并生成了 HeroesComponent 的四个文件。
heroes.component.html
heroes.component.scss
heroes.component.ts
heroes.component.spec.ts

5, 引用外界的类
import { Component, OnInit } from '@angular/core';
import { Hero } from '../hero';

6, 声明一个对象
  hero: Hero = {
    id: 1,
    name: 'Windstorm'
  }

7, 在 JSP 上面的 fmt 相当与 Angular 的管道这个概念
DatePipe：根据本地环境中的规则格式化日期值。例如：                     | {{ hero.birthday | date:"MM/dd/yy" }}
UpperCasePipe：把文本全部转换成大写。                               | {{hero.name | uppercase}}
LowerCasePipe ：把文本全部转换成小写。                              | {{hero.name | lowercase}}
CurrencyPipe ：把数字转换成货币字符串，根据本地环境中的规则进行格式化。   | {{ 123456 | currency }} 显示 $123,456.00
DecimalPipe：把数字转换成带小数点的字符串，根据本地环境中的规则进行格式化。| {{ 123456 | number }}
PercentPipe ：把数字转换成百分比字符串，根据本地环境中的规则进行格式化。  | {{hero.id | percent}}
JsonPipe: 把一个值转换成 JSON 字符串格式。在调试时很有用。             | {{ hero | json }} // { "id": 1, "name": "Windstorm", "birthday": "2020-08-04T22:21:56.685Z" }

8, 双向绑定变量
<input [(ngModel)]="hero.name"/>
前提：要假设背后的ts 文件有一个 hero 的对象
使用步骤：
1, 在app.module.ts 处引入
import { FormsModule } from '@angular/forms';
2, 在 imports 引入 FormsModule

9, for 循环
<li *ngFor="let hero of heroes">
注意：
==> 不用引入其他。
==> heroes 是背后的数组变量
==> ngFor 是一个指令 (directive), 指令前面都是 *

10, 绑定事件
==> 在需要绑定的 html 元素的地方使用 (), 里面是要绑定的事件名称，例如 (click), 最后结果例如： (click)="onSelect(hero)"
==> 在后台处，使用, 注意元素对应在函数的参数列表中
  onSelect(hero: Hero) {
    this.userSelectedHero = hero;
    console.log(hero);
  }

11, ngIf 也是一个指令，是说判断这个后台 ts 使用的变量是否为 undefined 或者 null
<div *ngIf="userSelectedHero">

    <h2>{{userSelectedHero.name | uppercase}} Details</h2>
    <div><span>id: </span>{{userSelectedHero.id}}</div>
    <div>
        <label>name:
      <input [(ngModel)]="userSelectedHero.name" placeholder="name"/>
    </label>
    </div>

</div>

12, 模板语言
===》 可以绑定 html 元素，并且赋值
<button [disabled]="isUnchanged">Save</button> // 这里， disabled 就是属性值， isUnchanged 是后台的
<div [ngClass]="{'special': isSpecial}"></div> // 这里， class    就是属性值， {'special': isSpecial} ==> isSpecial 是 ts 后台变量，如果为 true, 那么 add class 'special'
<div [class.special]="isSpecial">Special</div> 这里，当 isSpecial 为真，那么 add 'special '这个 class
<button [style.color]="isSpecial ? 'red' : 'green'"> 直接改变 style
<img src="images/ng-logo.png" [src]="heroImageUrl">
<button bind-disabled="isUnchanged" on-click="onSave($event)">Disabled Cancel</button>
<button [disabled]="!canSave" (click)="onSave($event)">Enabled Save</button>

13, component 传入一个参数

====> @Input() hero: Hero;//此处的变量， hero, 对应下面的 hero
====> 在调用处， <app-hero-detail [hero]="selectedHero"></app-hero-detail>//此处的 [hero], 对应上面的 hero


一个简单的 input 和 output 之间的使用。在父类调用子类的地方：
<app-input-output [item]="currentItem" (deleteRequest)="crossOffItem($event)"></app-input-output>
这里， currentItem 来自于父类的变量, crossOffItem 来自于父类的函数。所以在父类的 crossOffItem 函数的 $event 就是 string, 这个是由于下面的子类 new EventEmitter<string>(); 决定的
然后在子类可以声明:
input() item: <type>
@Output() deleteRequest = new EventEmitter<string>();


14, 创建 service:
ng generate service hero

15, 异步问题

  getHeroes(): Observable<Hero[]> {
    return of(HEROES);
  }
这里的 函数体内会用 httpClient 去获取远程数据，因此，结果应该加上 Observable<> 和 of()

在使用的时候，将会是
this.heroService.getHeroes().subscribe(result => this.heroes = result);

16, 生成一个路由器
ng generate module app-routing --flat --module=app
--flat 把这个文件放进了 src/app 中，而不是单独的目录中。
--module=app 告诉 CLI 把它注册到 AppModule 的 imports 数组中。


17, 在html 文件转向： <a *ngFor="let hero of heroes" class="col-1-4" routerLink="/detail/{{hero.id}}">
在 ts 文件转向: this.router.navigate(['/detail/' + hero.id, {}]);

18, <li *ngFor="let hero of heroes$ | async" >

这个意思是说， heroes 是一个 obserable 对象, 但是 let 不能直接读取， 所以要用 async 这个pipeline 去读取
heroes$ 中的 $ 就是代表 heroes 是一个 Observable 对象, 等同于 heroes$: Observable<Hero[]>;


==============================================================================================================================

以下是所有的知识细化

==============================================================================================================================

001, 当你通过 main.ts 中的 AppComponent 类启动时，Angular 在 index.html 中查找一个 <app-root> 元素， 然后实例化一个 AppComponent，并将其渲染到 <app-root> 标签中。

002, 这是一种构造函数
export class AppComponent {
  title: string;
  myHero: string;

  constructor() {
    this.title = 'Tour of Heroes';
    this.myHero = 'Windstorm';
  }
}

export class Hero {
  constructor(
    public id: number,
    public name: string) { }
}


003 在 HTML 页面里面
<input type="text" value="Sarah" #bindingInput></label>

在后台:
@ViewChild('bindingInput') bindingInput: ElementRef;// 这里代表一个控件，例如 input

由次可以得到
this.bindingInput.nativeElement.getAttribute('value') // 用于是 Sarah
this.bindingInput.nativeElement.value // 当即表示的值

但是，也可以不申明例如下面的例子：
let testButton = <HTMLInputElement> document.getElementById('testButton');
然后可以直接控制:
testButton.disabled = !testButton.disabled;
console.warn(testButton.disabled);

004, HTML attribute 和 DOM 的 property 的设置

===><input [disabled]="condition ? true : false"> // 这里绑定的是 property. 只有该 HTML 拥有该 property 才能改变。
===><input [AABBCCC]="condition ? true : false"> 这就不行了, 出错 Can't bind to 'AABBCCC' since it isn't a known property of 'button'.
即使改变成这样，也是不行的： <button id="testButton" (click)="working()" AABBCCC='{{isDisabled}}'>Test Button</button>

解决方法:
<button id="testButton" (click)="working()" [attr.AABBCCC]='isDisabled'>Test Button</button>

003, 更多的绑定法则：
<button [attr.aria-label]="help">help</button>
<div [class.special]="isSpecial">Special</div> //这个special 是个类
<button [style.color]="isSpecial ? 'red' : 'green'"> // 这里是直接设置 style

<button (click)="onSave($event)">Save</button>
<button on-click="onSave($event)">on-click Save</button>

004, 关于双向绑定.

----------------------------------------------------------------------------------------------------------------------
对于 父 - 子 关系
看下面在父html 中的写法:
<app-sizer [(size)]="fontSizePx"></app-sizer>
其实这写当于:
<app-sizer [size]="fontSizePx" (sizeChange)="fontSizePx=$event"></app-sizer>
所以，
<input [(ngModel)]="currentItem.name" id="example-change"> 相当于
<input [ngModel]="currentItem.name" (ngModelChange)="currentItem.name=$event" id="example-change">




是一种简写，也就是说， assume 子compoennt 中拥有一个 @input() size, 和一个 @Output() sizeChange = new EventEmitter<number>();
并且当 this.sizeChange.emit(this.size); 的时候，自动执行 fontSizePx=$event
----------------------------------------------------------------------------------------------------------------------
对于自己:
<label>FontSize (px): <input [(ngModel)]="fontSizePx"></label>
以下四种情况得到的结果是一样的：
<input [value]="currentItem.name" (input)="currentItem.name=$event.target.value" id="without">
<input [(ngModel)]="currentItem.name" id="example-ngModel">
<input bindon-ngModel="currentItem.name" id="example-bindon">
<input [ngModel]="currentItem.name" (ngModelChange)="currentItem.name=$event" id="example-change">


005, *ngFor 具体应用
<div *ngFor="let item of items; let i=index">{{i + 1}} - {{item.name}}</div>


006 以下是关于 form 的操作

在html 页面，如下所示
<form #itemForm="ngForm" (ngSubmit)="onSubmit(itemForm)">
  <label for="name">Name <input class="form-control" name="name" ngModel required /></label>
  <button type="submit">Submit</button>
</form>

<div [hidden]="!itemForm.form.valid">
  <p>{{ submitMessage }}</p>
</div>

<p>JSON: {{ itemForm.form.value | json }}</p> // 立即显示

在 ts 文件
import { Component, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';


@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  @ViewChild('itemForm') form: NgForm;

  private _submitMessage = '';

  get submitMessage() {
    return this._submitMessage;
  }

  onSubmit(form: NgForm) {
    this._submitMessage = 'Submitted. Form value is ' + JSON.stringify(form.value);
  }

}

==========================================================================================================================
007 常用 event 绑定函数写法

HTML:
<input (keyup)="onKey($event)">
TS:
onKey(event: KeyboardEvent) { // with type info
  this.values += (event.target as HTMLInputElement).value + ' | ';
}

<input #box (keyup)="0"> 这句话呢，就是 keyup 不做任何事情，只是起到触发更新视图的作用
<input #box (keyup.enter)="onEnter(box.value)"> 只有按回车键的时候才会起作用

==========================================================================================================================

009, 制造属性性指令
ng generate directive highlight

在ts 文件里面：
import { Directive, ElementRef } from '@angular/core';

@Directive({
  selector: '[appHighlight]'
})
export class HighlightDirective {
    constructor(el: ElementRef) {
       el.nativeElement.style.backgroundColor = 'yellow';
    }
}

在要使用的地方：
<p appHighlight>Highlight me!</p>// 系统检测到 appHighlight 就自动使用该属性

==========================================================================================================================

010 *ngIf

*ngIf 其实是简写，详细的是:
<ng-template [ngIf]="hero">
  <div class="name">{{hero.name}}</div>
</ng-template>
下面的写法是一样的:
======================================================
<ng-template [ngIf]="hero">
  <div class="name">{{hero.name}}</div>
</ng-template>
======================================================
<div class="name" *ngIf="hero">{{hero.name}}</div>
======================================================



011, <ng-container>
如果实在没有办法，又要求使用 ngIf 的时候，可以这样

<ng-container *ngIf='true'> 这个ng-container 不会显示
</ng-container>





999 一些奇怪的用法
<p>The item's undeclared best by date is: {{$any(this).bestByDate}}</p>
<p>The item's undeclared best by date is: {{$any(item).bestByDate}}</p>